// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2014 16:12:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testing_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testing_top_vlg_sample_tst(
	clk,
	control,
	pulse,
	sampler_tx
);
input  clk;
input  control;
input  pulse;
output sampler_tx;

reg sample;
time current_time;
always @(clk or control or pulse)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testing_top_vlg_check_tst (
	clearOut,
	clrCnt,
	cnt,
	idleCnt,
	latchCnt,
	pulseFOut,
	sampler_rx
);
input  clearOut;
input [3:0] clrCnt;
input [3:0] cnt;
input [3:0] idleCnt;
input [3:0] latchCnt;
input  pulseFOut;
input sampler_rx;

reg  clearOut_expected;
reg [3:0] clrCnt_expected;
reg [3:0] cnt_expected;
reg [3:0] idleCnt_expected;
reg [3:0] latchCnt_expected;
reg  pulseFOut_expected;

reg  clearOut_prev;
reg [3:0] clrCnt_prev;
reg [3:0] cnt_prev;
reg [3:0] idleCnt_prev;
reg [3:0] latchCnt_prev;
reg  pulseFOut_prev;

reg  clearOut_expected_prev;
reg [3:0] clrCnt_expected_prev;
reg [3:0] cnt_expected_prev;
reg [3:0] idleCnt_expected_prev;
reg [3:0] latchCnt_expected_prev;
reg  pulseFOut_expected_prev;

reg  last_clearOut_exp;
reg [3:0] last_clrCnt_exp;
reg [3:0] last_cnt_exp;
reg [3:0] last_idleCnt_exp;
reg [3:0] last_latchCnt_exp;
reg  last_pulseFOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	clearOut_prev = clearOut;
	clrCnt_prev = clrCnt;
	cnt_prev = cnt;
	idleCnt_prev = idleCnt;
	latchCnt_prev = latchCnt;
	pulseFOut_prev = pulseFOut;
end

// update expected /o prevs

always @(trigger)
begin
	clearOut_expected_prev = clearOut_expected;
	clrCnt_expected_prev = clrCnt_expected;
	cnt_expected_prev = cnt_expected;
	idleCnt_expected_prev = idleCnt_expected;
	latchCnt_expected_prev = latchCnt_expected;
	pulseFOut_expected_prev = pulseFOut_expected;
end



// expected clearOut
initial
begin
	clearOut_expected = 1'bX;
end 

// expected pulseFOut
initial
begin
	pulseFOut_expected = 1'bX;
end 
// expected idleCnt[ 3 ]
initial
begin
	idleCnt_expected[3] = 1'bX;
end 
// expected idleCnt[ 2 ]
initial
begin
	idleCnt_expected[2] = 1'bX;
end 
// expected idleCnt[ 1 ]
initial
begin
	idleCnt_expected[1] = 1'bX;
end 
// expected idleCnt[ 0 ]
initial
begin
	idleCnt_expected[0] = 1'bX;
end 
// expected latchCnt[ 3 ]
initial
begin
	latchCnt_expected[3] = 1'bX;
end 
// expected latchCnt[ 2 ]
initial
begin
	latchCnt_expected[2] = 1'bX;
end 
// expected latchCnt[ 1 ]
initial
begin
	latchCnt_expected[1] = 1'bX;
end 
// expected latchCnt[ 0 ]
initial
begin
	latchCnt_expected[0] = 1'bX;
end 
// expected cnt[ 3 ]
initial
begin
	cnt_expected[3] = 1'bX;
end 
// expected cnt[ 2 ]
initial
begin
	cnt_expected[2] = 1'bX;
end 
// expected cnt[ 1 ]
initial
begin
	cnt_expected[1] = 1'bX;
end 
// expected cnt[ 0 ]
initial
begin
	cnt_expected[0] = 1'bX;
end 
// expected clrCnt[ 3 ]
initial
begin
	clrCnt_expected[3] = 1'bX;
end 
// expected clrCnt[ 2 ]
initial
begin
	clrCnt_expected[2] = 1'bX;
end 
// expected clrCnt[ 1 ]
initial
begin
	clrCnt_expected[1] = 1'bX;
end 
// expected clrCnt[ 0 ]
initial
begin
	clrCnt_expected[0] = 1'bX;
end 
// generate trigger
always @(clearOut_expected or clearOut or clrCnt_expected or clrCnt or cnt_expected or cnt or idleCnt_expected or idleCnt or latchCnt_expected or latchCnt or pulseFOut_expected or pulseFOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clearOut = %b | expected clrCnt = %b | expected cnt = %b | expected idleCnt = %b | expected latchCnt = %b | expected pulseFOut = %b | ",clearOut_expected_prev,clrCnt_expected_prev,cnt_expected_prev,idleCnt_expected_prev,latchCnt_expected_prev,pulseFOut_expected_prev);
	$display("| real clearOut = %b | real clrCnt = %b | real cnt = %b | real idleCnt = %b | real latchCnt = %b | real pulseFOut = %b | ",clearOut_prev,clrCnt_prev,cnt_prev,idleCnt_prev,latchCnt_prev,pulseFOut_prev);
`endif
	if (
		( clearOut_expected_prev !== 1'bx ) && ( clearOut_prev !== clearOut_expected_prev )
		&& ((clearOut_expected_prev !== last_clearOut_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clearOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clearOut_expected_prev);
		$display ("     Real value = %b", clearOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clearOut_exp = clearOut_expected_prev;
	end
	if (
		( clrCnt_expected_prev[0] !== 1'bx ) && ( clrCnt_prev[0] !== clrCnt_expected_prev[0] )
		&& ((clrCnt_expected_prev[0] !== last_clrCnt_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clrCnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clrCnt_expected_prev);
		$display ("     Real value = %b", clrCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clrCnt_exp[0] = clrCnt_expected_prev[0];
	end
	if (
		( clrCnt_expected_prev[1] !== 1'bx ) && ( clrCnt_prev[1] !== clrCnt_expected_prev[1] )
		&& ((clrCnt_expected_prev[1] !== last_clrCnt_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clrCnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clrCnt_expected_prev);
		$display ("     Real value = %b", clrCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clrCnt_exp[1] = clrCnt_expected_prev[1];
	end
	if (
		( clrCnt_expected_prev[2] !== 1'bx ) && ( clrCnt_prev[2] !== clrCnt_expected_prev[2] )
		&& ((clrCnt_expected_prev[2] !== last_clrCnt_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clrCnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clrCnt_expected_prev);
		$display ("     Real value = %b", clrCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clrCnt_exp[2] = clrCnt_expected_prev[2];
	end
	if (
		( clrCnt_expected_prev[3] !== 1'bx ) && ( clrCnt_prev[3] !== clrCnt_expected_prev[3] )
		&& ((clrCnt_expected_prev[3] !== last_clrCnt_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clrCnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clrCnt_expected_prev);
		$display ("     Real value = %b", clrCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clrCnt_exp[3] = clrCnt_expected_prev[3];
	end
	if (
		( cnt_expected_prev[0] !== 1'bx ) && ( cnt_prev[0] !== cnt_expected_prev[0] )
		&& ((cnt_expected_prev[0] !== last_cnt_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[0] = cnt_expected_prev[0];
	end
	if (
		( cnt_expected_prev[1] !== 1'bx ) && ( cnt_prev[1] !== cnt_expected_prev[1] )
		&& ((cnt_expected_prev[1] !== last_cnt_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[1] = cnt_expected_prev[1];
	end
	if (
		( cnt_expected_prev[2] !== 1'bx ) && ( cnt_prev[2] !== cnt_expected_prev[2] )
		&& ((cnt_expected_prev[2] !== last_cnt_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[2] = cnt_expected_prev[2];
	end
	if (
		( cnt_expected_prev[3] !== 1'bx ) && ( cnt_prev[3] !== cnt_expected_prev[3] )
		&& ((cnt_expected_prev[3] !== last_cnt_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[3] = cnt_expected_prev[3];
	end
	if (
		( idleCnt_expected_prev[0] !== 1'bx ) && ( idleCnt_prev[0] !== idleCnt_expected_prev[0] )
		&& ((idleCnt_expected_prev[0] !== last_idleCnt_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port idleCnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", idleCnt_expected_prev);
		$display ("     Real value = %b", idleCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_idleCnt_exp[0] = idleCnt_expected_prev[0];
	end
	if (
		( idleCnt_expected_prev[1] !== 1'bx ) && ( idleCnt_prev[1] !== idleCnt_expected_prev[1] )
		&& ((idleCnt_expected_prev[1] !== last_idleCnt_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port idleCnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", idleCnt_expected_prev);
		$display ("     Real value = %b", idleCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_idleCnt_exp[1] = idleCnt_expected_prev[1];
	end
	if (
		( idleCnt_expected_prev[2] !== 1'bx ) && ( idleCnt_prev[2] !== idleCnt_expected_prev[2] )
		&& ((idleCnt_expected_prev[2] !== last_idleCnt_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port idleCnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", idleCnt_expected_prev);
		$display ("     Real value = %b", idleCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_idleCnt_exp[2] = idleCnt_expected_prev[2];
	end
	if (
		( idleCnt_expected_prev[3] !== 1'bx ) && ( idleCnt_prev[3] !== idleCnt_expected_prev[3] )
		&& ((idleCnt_expected_prev[3] !== last_idleCnt_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port idleCnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", idleCnt_expected_prev);
		$display ("     Real value = %b", idleCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_idleCnt_exp[3] = idleCnt_expected_prev[3];
	end
	if (
		( latchCnt_expected_prev[0] !== 1'bx ) && ( latchCnt_prev[0] !== latchCnt_expected_prev[0] )
		&& ((latchCnt_expected_prev[0] !== last_latchCnt_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port latchCnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", latchCnt_expected_prev);
		$display ("     Real value = %b", latchCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_latchCnt_exp[0] = latchCnt_expected_prev[0];
	end
	if (
		( latchCnt_expected_prev[1] !== 1'bx ) && ( latchCnt_prev[1] !== latchCnt_expected_prev[1] )
		&& ((latchCnt_expected_prev[1] !== last_latchCnt_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port latchCnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", latchCnt_expected_prev);
		$display ("     Real value = %b", latchCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_latchCnt_exp[1] = latchCnt_expected_prev[1];
	end
	if (
		( latchCnt_expected_prev[2] !== 1'bx ) && ( latchCnt_prev[2] !== latchCnt_expected_prev[2] )
		&& ((latchCnt_expected_prev[2] !== last_latchCnt_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port latchCnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", latchCnt_expected_prev);
		$display ("     Real value = %b", latchCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_latchCnt_exp[2] = latchCnt_expected_prev[2];
	end
	if (
		( latchCnt_expected_prev[3] !== 1'bx ) && ( latchCnt_prev[3] !== latchCnt_expected_prev[3] )
		&& ((latchCnt_expected_prev[3] !== last_latchCnt_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port latchCnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", latchCnt_expected_prev);
		$display ("     Real value = %b", latchCnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_latchCnt_exp[3] = latchCnt_expected_prev[3];
	end
	if (
		( pulseFOut_expected_prev !== 1'bx ) && ( pulseFOut_prev !== pulseFOut_expected_prev )
		&& ((pulseFOut_expected_prev !== last_pulseFOut_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pulseFOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pulseFOut_expected_prev);
		$display ("     Real value = %b", pulseFOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pulseFOut_exp = pulseFOut_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testing_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg control;
reg pulse;
// wires                                               
wire clearOut;
wire [3:0] clrCnt;
wire [3:0] cnt;
wire [3:0] idleCnt;
wire [3:0] latchCnt;
wire pulseFOut;

wire sampler;                             

// assign statements (if any)                          
testing_top i1 (
// port map - connection between master ports and signals/registers   
	.clearOut(clearOut),
	.clk(clk),
	.clrCnt(clrCnt),
	.cnt(cnt),
	.control(control),
	.idleCnt(idleCnt),
	.latchCnt(latchCnt),
	.pulse(pulse),
	.pulseFOut(pulseFOut)
);

// clk
initial
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
end 

// control
initial
begin
	control = 1'b1;
end 

// pulse
initial
begin
	pulse = 1'b0;
	pulse = #12000 1'b1;
	pulse = #1000 1'b0;
end 

testing_top_vlg_sample_tst tb_sample (
	.clk(clk),
	.control(control),
	.pulse(pulse),
	.sampler_tx(sampler)
);

testing_top_vlg_check_tst tb_out(
	.clearOut(clearOut),
	.clrCnt(clrCnt),
	.cnt(cnt),
	.idleCnt(idleCnt),
	.latchCnt(latchCnt),
	.pulseFOut(pulseFOut),
	.sampler_rx(sampler)
);
endmodule

